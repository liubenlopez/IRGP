/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import AlgoritmoGenetico.AlgoritmoGenetico;
import Microarray.Aristas;
import Microarray.DrawMincroarray;
import Microarray.Gen;
import Microarray.RedGenes;
import Microarray.iOperadoresCorrelacion;
import Microarray.microarray;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author Liuben
 */
public class InferenciaRG extends javax.swing.JFrame {

    /**
     * Creates new form ControlDeCombustible
     */
    public InferenciaRG() {
        initComponents();
        this.setLocationRelativeTo(this);
        setTitle("Inferencia de Redes de Genes Poblacional");
        try {
            Image image = new javax.swing.ImageIcon(getClass().getResource("/resources/images/red.png")).getImage();
            setIconImage(image);
        } catch (Exception e) {
        }
        try {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            this.addWindowListener(new WindowListener() {

                public void windowOpened(WindowEvent e) {
                }

                public void windowClosing(WindowEvent e) {
                    int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Seguro que quiere salir de la aplicación.", "", 0);
                    if (showConfirmDialog == 0) {
                        System.exit(0);
                    }
                }

                public void windowClosed(WindowEvent e) {
                }

                public void windowIconified(WindowEvent e) {
                }

                public void windowDeiconified(WindowEvent e) {
                }

                public void windowActivated(WindowEvent e) {
                    if (actualizar) {
                        actualizar = false;
                    }
                }

                public void windowDeactivated(WindowEvent e) {
                    actualizar = true;
                }
            });
        } catch (Exception e) {
        }
        bEjecutarAlgoritmo.setEnabled(false);
        bGuardarRed.setEnabled(false);
        bZoomMax.setEnabled(false);
        bZoomMin.setEnabled(false);
        jPanelConfiguraciones.setVisible(false);

        jComboSeleccion1.addItem("Ruleta");
        jComboCruce1.addItem("GenesDiferentes");
        jComboMutacion1.addItem("QuitarGen");
        jSpinnerPoblacionInicial1.setValue(4);
        jSpinnerGeneraciones1.setValue(5);
        jSpinnerCantidadDeGenes1.setValue(0);

        jSliderMedia.setValue(50);
        jSliderDesviacion.setValue(25);
        jLabel1.setText("50%");
        jLabel2.setText("25%");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelConfiguraciones = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTabbedConfiguraciones = new javax.swing.JTabbedPane();
        jPanelConfPreprocesamientoMicroarray = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jSliderMedia = new javax.swing.JSlider();
        jLabel25 = new javax.swing.JLabel();
        jSliderDesviacion = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanelConfAlgoritmoGenetico = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jComboSeleccion1 = new javax.swing.JComboBox();
        jComboCruce1 = new javax.swing.JComboBox();
        jComboMutacion1 = new javax.swing.JComboBox();
        jSpinnerPoblacionInicial1 = new javax.swing.JSpinner();
        jSpinnerGeneraciones1 = new javax.swing.JSpinner();
        jSpinnerCantidadDeGenes1 = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanelOpciones = new javax.swing.JPanel();
        bSeleccionarMicroarray = new javax.swing.JButton();
        bConfigurarAlgoritmo = new javax.swing.JButton();
        bEjecutarAlgoritmo = new javax.swing.JButton();
        jPanelMostrarAlgoritmoResult = new javax.swing.JPanel();
        jTabbedMostrar = new javax.swing.JTabbedPane();
        jPanelMostrarMicroarray = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPaneMicroarray = new javax.swing.JScrollPane();
        jLabel28 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        bZoomMax = new javax.swing.JButton();
        bZoomMin = new javax.swing.JButton();
        jPanelMostrarRedes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        bGuardarRed = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelConfiguraciones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 20));
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Configuraciones");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Establecer Umbrales"));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel26.setForeground(new java.awt.Color(51, 51, 51));
        jLabel26.setText("Media");

        jSliderMedia.setMaximum(99);
        jSliderMedia.setMinimum(1);
        jSliderMedia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSliderMediaMouseClicked(evt);
            }
        });
        jSliderMedia.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSliderMediaMouseDragged(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel25.setForeground(new java.awt.Color(51, 51, 51));
        jLabel25.setText("Desviación Media ");

        jSliderDesviacion.setMaximum(99);
        jSliderDesviacion.setMinimum(1);
        jSliderDesviacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSliderDesviacionMouseClicked(evt);
            }
        });
        jSliderDesviacion.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSliderDesviacionMouseDragged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14));
        jLabel1.setText("0");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14));
        jLabel2.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSliderMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addComponent(jLabel25)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSliderDesviacion, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSliderMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jSliderDesviacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelConfPreprocesamientoMicroarrayLayout = new javax.swing.GroupLayout(jPanelConfPreprocesamientoMicroarray);
        jPanelConfPreprocesamientoMicroarray.setLayout(jPanelConfPreprocesamientoMicroarrayLayout);
        jPanelConfPreprocesamientoMicroarrayLayout.setHorizontalGroup(
            jPanelConfPreprocesamientoMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfPreprocesamientoMicroarrayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelConfPreprocesamientoMicroarrayLayout.setVerticalGroup(
            jPanelConfPreprocesamientoMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfPreprocesamientoMicroarrayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        jTabbedConfiguraciones.addTab("Preprocesamiento Microarray", jPanelConfPreprocesamientoMicroarray);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Selección");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel22.setForeground(new java.awt.Color(51, 51, 51));
        jLabel22.setText("Cantidad de Genes");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel21.setForeground(new java.awt.Color(51, 51, 51));
        jLabel21.setText("Generaciones");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel20.setForeground(new java.awt.Color(51, 51, 51));
        jLabel20.setText("Población Inicial");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Mutación");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("Cruzamiento");

        javax.swing.GroupLayout jPanelConfAlgoritmoGeneticoLayout = new javax.swing.GroupLayout(jPanelConfAlgoritmoGenetico);
        jPanelConfAlgoritmoGenetico.setLayout(jPanelConfAlgoritmoGeneticoLayout);
        jPanelConfAlgoritmoGeneticoLayout.setHorizontalGroup(
            jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfAlgoritmoGeneticoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel22)
                    .addComponent(jLabel21)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19))
                .addGap(10, 10, 10)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboMutacion1, 0, 162, Short.MAX_VALUE)
                    .addComponent(jSpinnerPoblacionInicial1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(jSpinnerGeneraciones1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(jSpinnerCantidadDeGenes1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(jComboCruce1, 0, 162, Short.MAX_VALUE)
                    .addComponent(jComboSeleccion1, 0, 162, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelConfAlgoritmoGeneticoLayout.setVerticalGroup(
            jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfAlgoritmoGeneticoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jComboSeleccion1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jComboCruce1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jComboMutacion1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerPoblacionInicial1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerGeneraciones1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerCantidadDeGenes1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedConfiguraciones.addTab("Algoritmo Genético", jPanelConfAlgoritmoGenetico);

        javax.swing.GroupLayout jPanelConfiguracionesLayout = new javax.swing.GroupLayout(jPanelConfiguraciones);
        jPanelConfiguraciones.setLayout(jPanelConfiguracionesLayout);
        jPanelConfiguracionesLayout.setHorizontalGroup(
            jPanelConfiguracionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfiguracionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedConfiguraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                    .addGroup(jPanelConfiguracionesLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 202, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelConfiguracionesLayout.setVerticalGroup(
            jPanelConfiguracionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedConfiguraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelOpciones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        bSeleccionarMicroarray.setFont(new java.awt.Font("Tahoma", 1, 14));
        bSeleccionarMicroarray.setForeground(new java.awt.Color(51, 51, 51));
        bSeleccionarMicroarray.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/upload.png"))); // NOI18N
        bSeleccionarMicroarray.setToolTipText("Seleccionar Microarray");
        bSeleccionarMicroarray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSeleccionarMicroarrayActionPerformed(evt);
            }
        });

        bConfigurarAlgoritmo.setFont(new java.awt.Font("Tahoma", 1, 14));
        bConfigurarAlgoritmo.setForeground(new java.awt.Color(51, 51, 51));
        bConfigurarAlgoritmo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/config.png"))); // NOI18N
        bConfigurarAlgoritmo.setToolTipText("Configurar Algoritmo");
        bConfigurarAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConfigurarAlgoritmoActionPerformed(evt);
            }
        });

        bEjecutarAlgoritmo.setFont(new java.awt.Font("Tahoma", 1, 14));
        bEjecutarAlgoritmo.setForeground(new java.awt.Color(51, 51, 51));
        bEjecutarAlgoritmo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/play1.png"))); // NOI18N
        bEjecutarAlgoritmo.setToolTipText("Ejecutar Algoritmo");
        bEjecutarAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEjecutarAlgoritmoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelOpcionesLayout = new javax.swing.GroupLayout(jPanelOpciones);
        jPanelOpciones.setLayout(jPanelOpcionesLayout);
        jPanelOpcionesLayout.setHorizontalGroup(
            jPanelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bSeleccionarMicroarray)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bConfigurarAlgoritmo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bEjecutarAlgoritmo)
                .addContainerGap(805, Short.MAX_VALUE))
        );
        jPanelOpcionesLayout.setVerticalGroup(
            jPanelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bEjecutarAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bConfigurarAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSeleccionarMicroarray, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelMostrarAlgoritmoResult.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneMicroarray, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneMicroarray, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel28.setForeground(new java.awt.Color(51, 51, 51));
        jLabel28.setText("Genes:");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel27.setForeground(new java.awt.Color(51, 51, 51));
        jLabel27.setText("0");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel29.setForeground(new java.awt.Color(51, 51, 51));
        jLabel29.setText("Muestras:");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel30.setForeground(new java.awt.Color(51, 51, 51));
        jLabel30.setText("0");

        bZoomMax.setText("+");
        bZoomMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bZoomMaxActionPerformed(evt);
            }
        });

        bZoomMin.setText("-");
        bZoomMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bZoomMinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMostrarMicroarrayLayout = new javax.swing.GroupLayout(jPanelMostrarMicroarray);
        jPanelMostrarMicroarray.setLayout(jPanelMostrarMicroarrayLayout);
        jPanelMostrarMicroarrayLayout.setHorizontalGroup(
            jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMostrarMicroarrayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMostrarMicroarrayLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30)
                        .addGap(18, 18, 18)
                        .addComponent(bZoomMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bZoomMin)))
                .addContainerGap())
        );
        jPanelMostrarMicroarrayLayout.setVerticalGroup(
            jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMostrarMicroarrayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(jLabel27)
                        .addComponent(jLabel29)
                        .addComponent(jLabel30))
                    .addGroup(jPanelMostrarMicroarrayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bZoomMax)
                        .addComponent(bZoomMin)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedMostrar.addTab("Microarray", jPanelMostrarMicroarray);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Redes Optenidas"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        bGuardarRed.setFont(new java.awt.Font("Tahoma", 1, 14));
        bGuardarRed.setForeground(new java.awt.Color(51, 51, 51));
        bGuardarRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/save.png"))); // NOI18N
        bGuardarRed.setToolTipText("Guardar Red");
        bGuardarRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarRedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMostrarRedesLayout = new javax.swing.GroupLayout(jPanelMostrarRedes);
        jPanelMostrarRedes.setLayout(jPanelMostrarRedesLayout);
        jPanelMostrarRedesLayout.setHorizontalGroup(
            jPanelMostrarRedesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
            .addGroup(jPanelMostrarRedesLayout.createSequentialGroup()
                .addComponent(bGuardarRed, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 530, Short.MAX_VALUE))
        );
        jPanelMostrarRedesLayout.setVerticalGroup(
            jPanelMostrarRedesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMostrarRedesLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bGuardarRed))
        );

        jTabbedMostrar.addTab("Redes Optenidas", jPanelMostrarRedes);

        javax.swing.GroupLayout jPanelMostrarAlgoritmoResultLayout = new javax.swing.GroupLayout(jPanelMostrarAlgoritmoResult);
        jPanelMostrarAlgoritmoResult.setLayout(jPanelMostrarAlgoritmoResultLayout);
        jPanelMostrarAlgoritmoResultLayout.setHorizontalGroup(
            jPanelMostrarAlgoritmoResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMostrarAlgoritmoResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelMostrarAlgoritmoResultLayout.setVerticalGroup(
            jPanelMostrarAlgoritmoResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMostrarAlgoritmoResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Archivo");

        jMenuItem9.setText("Abrir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem10.setText("Salir");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Ayuda");

        jMenuItem13.setText("Acerca de");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConfiguraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMostrarAlgoritmoResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelConfiguraciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelMostrarAlgoritmoResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Seguro que quiere salir de la aplicación.", "", 0) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        AcercaDe acercaDe = new AcercaDe(this, true);
        acercaDe.setLocationRelativeTo(this);
        acercaDe.setResizable(false);
        acercaDe.setVisible(true);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void bEjecutarAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEjecutarAlgoritmoActionPerformed
        bGuardarRed.setEnabled(false);
        calcularCorrelacion();
        calcularMatrizDeAdy();
        if (validar()) {
            ag = new AlgoritmoGenetico(datosCo, matrizAdyacencia, ma.getListaGenes(), Seleccion, Cruce, Mutacion, Poblacion, NumGeneraciones, CantGenes);
            ag.correAlgGenetico();
            actualizarTabla();
        }
        //MostrarGeneraciones(ag);
    }//GEN-LAST:event_bEjecutarAlgoritmoActionPerformed

    private void bConfigurarAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConfigurarAlgoritmoActionPerformed
        jPanelConfiguraciones.setVisible(!jPanelConfiguraciones.isVisible());
    }//GEN-LAST:event_bConfigurarAlgoritmoActionPerformed

    private void bSeleccionarMicroarrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSeleccionarMicroarrayActionPerformed
        bGuardarRed.setEnabled(false);
        seleccionarMicroarray();
    }//GEN-LAST:event_bSeleccionarMicroarrayActionPerformed

    private void bGuardarRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarRedActionPerformed
        bGuardarRed.setEnabled(true);
        float selecR = (float) (jTable1.getSelectedRow());
        float numeroRedIndeterminado = selecR / (float) (Poblacion);
        float numeroRedIndeterminado1 = Float.valueOf(String.valueOf(numeroRedIndeterminado).substring(0, String.valueOf(numeroRedIndeterminado).indexOf(".")));
        int generacion = (int) (numeroRedIndeterminado1);
        if (numeroRedIndeterminado > numeroRedIndeterminado1) {
            generacion = (int) (numeroRedIndeterminado1 + 1);
        }
        int numeroRed = (jTable1.getSelectedRow() - 1) - (generacion != 0 ? generacion - 1 : 0) * Poblacion;
        if (numeroRed != Poblacion - 1 && numeroRed >= 0) {
            List<List<Microarray.RedGenes>> generaciones = ag.getGeneraciones();
            List<Microarray.RedGenes> get = generaciones.get(generacion - 1);
            Microarray.RedGenes get1 = get.get(numeroRed);
            JFileChooser jfc = new JFileChooser();
            jfc.setMultiSelectionEnabled(true);
            jfc.setDialogTitle("Seleccionar Carpeta Para Guardar la Red");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                direccionMicroarray = jfc.getSelectedFile().getAbsolutePath();
                File f = new File(direccionMicroarray + "\\Red" + (numeroRed + 1) + "Generación" + generacion + ".txt");
                try {
                    PrintWriter fsalida = new PrintWriter(f);
                    String red = getRedString(get1, generacion, numeroRed + 1);
                    String[] strings = red.split("/");
                    fsalida.println(strings[0]);
                    fsalida.println(strings[1]);
                    fsalida.println(strings[2]);
                    fsalida.close();

                } catch (IOException ex) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un red para poder guardarla.");
        }
    }//GEN-LAST:event_bGuardarRedActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        bGuardarRed.setEnabled(false);
        seleccionarMicroarray();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jSliderMediaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderMediaMouseDragged
        jLabel1.setText(String.valueOf(jSliderMedia.getValue()) + "%");
    }//GEN-LAST:event_jSliderMediaMouseDragged

    private void jSliderDesviacionMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderDesviacionMouseDragged
        jLabel2.setText(String.valueOf(jSliderDesviacion.getValue()) + "%");
    }//GEN-LAST:event_jSliderDesviacionMouseDragged

    private void jSliderMediaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderMediaMouseClicked
        jLabel1.setText(String.valueOf(jSliderMedia.getValue()) + "%");
    }//GEN-LAST:event_jSliderMediaMouseClicked

    private void jSliderDesviacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderDesviacionMouseClicked
        jLabel2.setText(String.valueOf(jSliderDesviacion.getValue()) + "%");
    }//GEN-LAST:event_jSliderDesviacionMouseClicked

    private void bZoomMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bZoomMinActionPerformed
        if (zoom > 1) {
            zoom--;
        }
        pintar();
    }//GEN-LAST:event_bZoomMinActionPerformed

    private void bZoomMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bZoomMaxActionPerformed
        zoom++;
        pintar();
    }//GEN-LAST:event_bZoomMaxActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        bGuardarRed.setEnabled(true);
        float selecR = (float) (jTable1.getSelectedRow());
        float numeroRedIndeterminado = selecR / (float) (Poblacion);
        float numeroRedIndeterminado1 = Float.valueOf(String.valueOf(numeroRedIndeterminado).substring(0, String.valueOf(numeroRedIndeterminado).indexOf(".")));
        int generacion = (int) (numeroRedIndeterminado1);
        if (numeroRedIndeterminado > numeroRedIndeterminado1) {
            generacion = (int) (numeroRedIndeterminado1 + 1);
        }
        int numeroRed = (jTable1.getSelectedRow() - 1) - (generacion != 0 ? generacion - 1 : 0) * Poblacion;
        if (numeroRed != Poblacion - 1 && numeroRed >= 0) {
            List<List<Microarray.RedGenes>> generaciones = ag.getGeneraciones();
            List<Microarray.RedGenes> get = generaciones.get(generacion - 1);
            Microarray.RedGenes get1 = get.get(numeroRed);
            MostrarRedPant(get1, generacion, numeroRed + 1);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        bGuardarRed.setEnabled(true);
        float selecR = (float) (jTable1.getSelectedRow());
        float numeroRedIndeterminado = selecR / (float) (Poblacion);
        float numeroRedIndeterminado1 = Float.valueOf(String.valueOf(numeroRedIndeterminado).substring(0, String.valueOf(numeroRedIndeterminado).indexOf(".")));
        int generacion = (int) (numeroRedIndeterminado1);
        if (numeroRedIndeterminado > numeroRedIndeterminado1) {
            generacion = (int) (numeroRedIndeterminado1 + 1);
        }
        int numeroRed = (jTable1.getSelectedRow() - 1) - (generacion != 0 ? generacion - 1 : 0) * Poblacion;
        if (numeroRed != Poblacion - 1 && numeroRed >= 0) {
            List<List<Microarray.RedGenes>> generaciones = ag.getGeneraciones();
            List<Microarray.RedGenes> get = generaciones.get(generacion - 1);
            Microarray.RedGenes get1 = get.get(numeroRed);
            MostrarRedPant(get1, generacion, numeroRed + 1);
        }
    }//GEN-LAST:event_jTable1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InferenciaRG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InferenciaRG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InferenciaRG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InferenciaRG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InferenciaRG().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConfigurarAlgoritmo;
    private javax.swing.JButton bEjecutarAlgoritmo;
    private javax.swing.JButton bGuardarRed;
    private javax.swing.JButton bSeleccionarMicroarray;
    private javax.swing.JButton bZoomMax;
    private javax.swing.JButton bZoomMin;
    private javax.swing.JComboBox jComboCruce1;
    private javax.swing.JComboBox jComboMutacion1;
    private javax.swing.JComboBox jComboSeleccion1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelConfAlgoritmoGenetico;
    private javax.swing.JPanel jPanelConfPreprocesamientoMicroarray;
    private javax.swing.JPanel jPanelConfiguraciones;
    private javax.swing.JPanel jPanelMostrarAlgoritmoResult;
    private javax.swing.JPanel jPanelMostrarMicroarray;
    private javax.swing.JPanel jPanelMostrarRedes;
    private javax.swing.JPanel jPanelOpciones;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneMicroarray;
    private javax.swing.JSlider jSliderDesviacion;
    private javax.swing.JSlider jSliderMedia;
    private javax.swing.JSpinner jSpinnerCantidadDeGenes1;
    private javax.swing.JSpinner jSpinnerGeneraciones1;
    private javax.swing.JSpinner jSpinnerPoblacionInicial1;
    private javax.swing.JTabbedPane jTabbedConfiguraciones;
    private javax.swing.JTabbedPane jTabbedMostrar;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    public boolean actualizar = false;
    public String direccionMicroarray = "";
    private static microarray ma;
    private static DecimalFormat dec = new DecimalFormat("##.##");
    private static DecimalFormat dec1 = new DecimalFormat("##.##");
    private static double[][] datosCo;
    private static int[][] matrizAdyacencia;
    private static AlgoritmoGenetico ag;
    private int Poblacion = 5;
    private int NumGeneraciones = 5;
    private int CantGenes = 100;
    private String Cruce;
    private String Seleccion;
    private String Mutacion;
    private int zoom = 1;

    private boolean validar() {
        Cruce = (String) jComboCruce1.getSelectedItem();
        Seleccion = (String) jComboSeleccion1.getSelectedItem();
        Mutacion = (String) jComboMutacion1.getSelectedItem();

        if ((Integer) jSpinnerCantidadDeGenes1.getValue() < 2) {
            JOptionPane.showMessageDialog(null, "La cantidad de genes debe ser mayor que 2.");
            jPanelConfiguraciones.setVisible(true);
            jTabbedConfiguraciones.setSelectedIndex(1);
            jSpinnerCantidadDeGenes1.setValue(2);
            return false;
        } else if ((Integer) jSpinnerCantidadDeGenes1.getValue() > ma.getListaGenes().length) {
            JOptionPane.showMessageDialog(null, "La cantidad de genes debe ser menor que " + (ma.getListaGenes().length) + ".");
            jPanelConfiguraciones.setVisible(true);
            jTabbedConfiguraciones.setSelectedIndex(1);
            jSpinnerCantidadDeGenes1.setValue(ma.getListaGenes().length);
            return false;
        } else {
            CantGenes = (Integer) jSpinnerCantidadDeGenes1.getValue();
        }

        if ((Integer) jSpinnerPoblacionInicial1.getValue() < 3) {
            JOptionPane.showMessageDialog(null, "La población inicial debe ser mayor que 3.");
            jPanelConfiguraciones.setVisible(true);
            jTabbedConfiguraciones.setSelectedIndex(1);
            jSpinnerPoblacionInicial1.setValue(3);
            return false;
        } else {
            Poblacion = 1 + (Integer) jSpinnerPoblacionInicial1.getValue();
        }

        if ((Integer) jSpinnerGeneraciones1.getValue() < 1) {
            JOptionPane.showMessageDialog(null, "La cantidad de generaciones debe ser mayor que 1.");
            jPanelConfiguraciones.setVisible(true);
            jTabbedConfiguraciones.setSelectedIndex(1);
            jSpinnerGeneraciones1.setValue(1);
            return false;
        } else {
            NumGeneraciones = (Integer) jSpinnerGeneraciones1.getValue();
        }

        return true;
    }

    private void seleccionarMicroarray() {
        JFileChooser jfc = new JFileChooser();
        jfc.setMultiSelectionEnabled(true);
        jfc.setDialogTitle("Seleccionar Microarray");
        //jfc.setCurrentDirectory(new File(dir));
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            direccionMicroarray = jfc.getSelectedFile().getAbsolutePath();
            System.out.println(direccionMicroarray);
            //setPath(path, "resources/images/AbsolutePaht.txt");
            String[] split = direccionMicroarray.split("\\.");
            if ("arff".equals(split[split.length - 1]) || "ARFF".equals(split[split.length - 1])) {
                ma = new microarray(direccionMicroarray);
                pintar();
                AnalisisDiferencial();
                jLabel27.setText(String.valueOf(ma.getListaGenes().length));
                jLabel30.setText(String.valueOf(ma.getMicroarrayData().length));
                jSpinnerCantidadDeGenes1.setValue(ma.getListaGenes().length / 5);
                bConfigurarAlgoritmo.setEnabled(true);
                bEjecutarAlgoritmo.setEnabled(true);
                bZoomMax.setEnabled(true);
                bZoomMin.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un Microarray en formato *.arff");
            }
        }
    }

    public void setPath(String path, String file) {
        try {
            FileOutputStream fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(path);
            oos.close();
            fos.close();
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }

    void ordenarQuicksort(int[] vector, int primero, int ultimo) {
        int i = primero, j = ultimo;
        int pivote = vector[(primero + ultimo) / 2];
        int auxiliar;

        do {
            while (vector[i] < pivote) {
                i++;
            }
            while (vector[j] > pivote) {
                j--;
            }

            if (i <= j) {
                auxiliar = vector[j];
                vector[j] = vector[i];
                vector[i] = auxiliar;
                i++;
                j--;
            }

        } while (i <= j);

        if (primero < j) {
            ordenarQuicksort(vector, primero, j);
        }
        if (ultimo > i) {
            ordenarQuicksort(vector, i, ultimo);
        }
    }

    public static void mostrarMicroarray(float[][] Matriz, String titulo) {
        System.out.print(titulo);
        for (int i = 0; i < Matriz.length; i++) {
            for (int j = 0; j < Matriz[0].length; j++) {
                String s = dec.format(Matriz[i][j]);
                if (s.equals("0") || s.equals("-0")) {
                    s = "0,00";
                }
                System.out.print(s + " ");
            }
            System.out.print("\n");
        }
        System.out.print("_________________________________________\n");
    }

    private static void MostrarListaGenes(String[] lisTGenes) {
        System.out.print("Lista de genes del Microarray:\n");
        for (int i = 0; i < lisTGenes.length; i++) {
            System.out.print(lisTGenes[i] + " ");
        }
        System.out.print("\n_________________________________________\n");
    }

    public static void mostrarMatrizCorrelacion(double[][] Matriz, String titulo) {
        System.out.print(titulo);
        for (int i = 0; i < Matriz.length; i++) {
            for (int j = 0; j < Matriz[0].length; j++) {
                if (Matriz[i][j] == 0) {
                    System.out.print("  0,00 ");
                } else if (Matriz[i][j] < 0) {
                    try {
                        System.out.print(" " + String.valueOf(Matriz[i][j]).substring(0, 5) + " ");
                    } catch (Exception e) {
                        System.out.print(" " + String.valueOf(Matriz[i][j]) + " ");
                    }

                } else {
                    try {
                        System.out.print("  " + String.valueOf(Matriz[i][j]).substring(0, 4) + " ");
                    } catch (Exception e) {
                        System.out.print(" " + String.valueOf(Matriz[i][j]) + " ");
                    }
                }
            }
            System.out.print("\n");
        }
        System.out.print("_________________________________________\n");
    }

    private static void MostrarGeneraciones(AlgoritmoGenetico ag) {
        int t = 0;
        if (true) {
            List<List<Microarray.RedGenes>> generaciones = ag.getGeneraciones();
            for (int i = 0; i < generaciones.size(); i++) {
                t++;
                System.out.print("Generacion: " + t + "\n");

                List<Microarray.RedGenes> get = generaciones.get(i);

                for (int j = 0; j < get.size(); j++) {
                    //RedGenes get = (RedGenes) generacion.get(i);
                    Microarray.RedGenes get1 = get.get(j);

                    MostrarRedPant(get1, t, j + 1);
                }
            }
        } else {
            /*for (List generacion : ag.getGeneraciones()) {
            t++;
            if (t == (NumGeneraciones)) {
            System.out.print("Generacion: " + t + "\n");
            for (RedGenes rg : (List<RedGenes>) generacion) {
            MostrarRedPant(rg, t);
            }
            System.out.print("____________________________________\n");
            }
            }*/
        }
    }

    public static void MostrarRedPant(Microarray.RedGenes RG, int generacion, int numRed) {
        SingleGraph graph = new SingleGraph("");
        List<Gen> listG = RG.getListGenes();
        List<Aristas> listA = RG.getListArista();
        for (int i = 0; i < listG.size(); i++) {//agrego los nodos
            graph.addNode(listG.get(i).getTipo());
        }
        for (org.graphstream.graph.Node n : graph.getEachNode()) {//lespongo etiquetas a los nodos
            n.setAttribute("ui.label", n.getId());
        }
        for (int i = 0; i < listA.size(); i++) {//agrego las aristas
            graph.addEdge("A" + i, listA.get(i).getGen1().getTipo(), listA.get(i).getGen2().getTipo());
        }
        graph.addAttribute("ui.stylesheet", "node:clicked { fill-color: blue; size: 20; }");
        graph.addAttribute("ui.title", " Generación:" + generacion + "  RedNúmero:" + numRed + "  NodosInternos:" + RG.getNodosInternos() + "  TotalNodos:" + RG.getListGenes().size() + "  Aristas:" + RG.getListArista().size() + "  Fitness:" + String.valueOf(RG.getFitness()).substring(0, 5));
        Viewer viewer = graph.display(true);
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
    }

    private void AnalisisDiferencial() {
        //calcular media y desviacion estandar
        String[] listaGenes = ma.getListaGenes();
        double[] listaMedias = new double[listaGenes.length];
        double[] listaDesviaciones = new double[listaGenes.length];
        float[][] microarrayData = ma.getMicroarrayData();
        for (int i = 0; i < listaGenes.length; i++) {
            float media = 0;
            double desviacion = 0;
            for (int j = 0; j < microarrayData.length; j++) {
                media += microarrayData[j][i];
                if (j + 1 == microarrayData.length) {
                    media /= j + 1;
                }
            }
            for (int j = 0; j < microarrayData.length; j++) {
                desviacion += Math.pow(microarrayData[j][i] - media, 2);
                if (j + 1 == microarrayData.length) {
                    desviacion = Math.sqrt(desviacion / j);
                }
            }
            listaMedias[i] = media;
            listaDesviaciones[i] = desviacion;
        }

        //estandarizar las medias y desviaciones
        double maxMedia = Double.MIN_VALUE;
        double minMedia = Double.MAX_VALUE;
        double maxDesviacion = Double.MIN_VALUE;
        double minDesviacion = Double.MAX_VALUE;
        for (int i = 0; i < listaDesviaciones.length; i++) {
            if (maxMedia < listaMedias[i]) {
                maxMedia = listaMedias[i];
            }
            if (minMedia > listaMedias[i]) {
                minMedia = listaMedias[i];
            }
            if (maxDesviacion < listaDesviaciones[i]) {
                maxDesviacion = listaDesviaciones[i];
            }
            if (minDesviacion > listaDesviaciones[i]) {
                minDesviacion = listaDesviaciones[i];
            }
        }
        for (int i = 0; i < listaDesviaciones.length; i++) {
            listaMedias[i] = (listaMedias[i] - minMedia) / (maxMedia - minMedia);
            listaDesviaciones[i] = (listaDesviaciones[i] - minDesviacion) / (maxDesviacion - minDesviacion);
        }

        //Establecer umbralizar y seleccionar los que tengan una desviacion < 0.25 y una media > 0.50
        for (int i = 0; i < listaDesviaciones.length; i++) {
            float media = (float) jSliderMedia.getValue() / 100;
            float desviacion = (float) jSliderDesviacion.getValue() / 100;
            if (listaDesviaciones[i] <= desviacion) {
                if (listaMedias[i] < media) {
                    listaGenes[i] = "";
                }
            } else {
                listaGenes[i] = "";
            }
        }

        //Edito el microarray
        ArrayList<String> listaGenesTemp = new ArrayList<String>();
        ArrayList<ArrayList<Float>> microarrayDataTemp = new ArrayList<ArrayList<Float>>();
        for (int i = 0; i < listaGenes.length; i++) {
            listaGenesTemp.add(listaGenes[i]);
        }
        for (int i = 0; i < microarrayData.length; i++) {
            microarrayDataTemp.add(new ArrayList<Float>());
            for (int j = 0; j < microarrayData[i].length; j++) {
                microarrayDataTemp.get(i).add(microarrayData[i][j]);
            }
        }
        for (int i = 0; i < microarrayDataTemp.get(0).size(); i++) {
            if (listaGenesTemp.get(i) == "") {
                listaGenesTemp.remove(i);
                for (int j = 0; j < microarrayDataTemp.size(); j++) {
                    microarrayDataTemp.get(j).remove(i);
                }
                i--;
            }
        }

        float[][] microarrayDataTempFloat = new float[microarrayDataTemp.size()][microarrayDataTemp.get(0).size()];
        for (int i = 0; i < microarrayDataTemp.size(); i++) {
            for (int j = 0; j < microarrayDataTemp.get(i).size(); j++) {
                microarrayDataTempFloat[i][j] = microarrayDataTemp.get(i).get(j);
            }
        }

        ma.setListaGenes(listaGenesTemp);
        ma.setMicroarrayData(microarrayDataTempFloat);

        System.out.println(listaGenesTemp.size());
    }

    private void calcularCorrelacion() {
        iOperadoresCorrelacion operadorCorrelacion = null;
        try {
            Class newClass = Class.forName("Microarray.OperadoresCorrelacion.Spearman");
            operadorCorrelacion = (iOperadoresCorrelacion) newClass.newInstance();
        } catch (ClassNotFoundException ex) {
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        }
        operadorCorrelacion.setData(ma.getMicroarrayData());
        datosCo = operadorCorrelacion.getCorrelationMatrix();
        //mostrarMatrizCorrelacion(datosCo, "Matriz correlacion " + OperadoresCorrelacion + " :\n");
    }

    private void calcularMatrizDeAdy() {
        matrizAdyacencia = new int[datosCo.length][datosCo.length];
        for (int i = 0; i < datosCo.length; i++) {
            for (int j = i + 1; j < datosCo[0].length; j++) {
                if (datosCo[i][j] > 0.85) {
                    matrizAdyacencia[i][j] = 1;
                    matrizAdyacencia[j][i] = 1;
                }
            }
        }

        int[] cantGrados = new int[datosCo.length];
        for (int i = 0; i < matrizAdyacencia.length; i++) {
            int gradoTemp = 0;
            for (int j = 0; j < matrizAdyacencia[0].length; j++) {
                gradoTemp += matrizAdyacencia[i][j];
            }
            cantGrados[i] = gradoTemp;
        }
        ordenarQuicksort(cantGrados, 0, cantGrados.length - 1);//para ver la distribucion de los grados de los nodos
    }

    private void actualizarTabla() {
        int t = 0;
        List filas = new ArrayList<String>();
        List<List<Microarray.RedGenes>> generaciones = ag.getGeneraciones();
        for (int i = 0; i < generaciones.size(); i++) {
            t++;
            filas.add("GENERACIÓN: " + t);
            double mejorFitness = 0;
            int posicionMejorFitness = 0;
            for (int j = 0; j < generaciones.get(i).size(); j++) {
                if (mejorFitness < generaciones.get(i).get(j).getFitness()) {
                    mejorFitness = generaciones.get(i).get(j).getFitness();
                    posicionMejorFitness = j;
                }
                String fila = "      Fitness: " + String.valueOf(generaciones.get(i).get(j).getFitness()).substring(0, 5)
                        + " Cantidad de Genes: " + generaciones.get(i).get(j).getListGenes().size()
                        + " Cantidad de Aristas: " + generaciones.get(i).get(j).getListArista().size();
                filas.add(fila);
            }
            int posicion = (filas.size() - 1) - ((generaciones.get(i).size() - 1) - posicionMejorFitness);
            Object filaL = filas.get(posicion);
            filaL = ">>" + filaL.toString().substring(5, filaL.toString().length());
            filas.set(posicion, filaL);
        }
        Object[][] productos = new Object[filas.size()][1];
        for (int i = 0; i < filas.size(); i++) {
            productos[i][0] = filas.get(i);
        }
        jTable1.setModel(new DefaultTableModel(productos, new Object[]{"Redes"}) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTabbedMostrar.setSelectedIndex(1);
    }

    private String getRedString(Microarray.RedGenes RG, int generacion, int numRed) {
        // 1.- MOSTRAR LISTA GENES
        String temp = "";
        String s = "Lista de Genes : ";
        for (Gen g : RG.getListGenes()) {
            temp += g.getTipo() + ", ";
        }
        s += temp.substring(0, temp.length() - 2) + "/";
        // 2.- MOSTRAR LISTA ARISTAS
        s += "Lista de Aristas : ";
        temp = "";
        for (Aristas a : RG.getListArista()) {
            temp += "(" + a.getGen1().getTipo() + ", " + a.getGen2().getTipo() + " :" + dec1.format(a.getPesos()) + "); ";
        }
        s += temp.substring(0, temp.length() - 2);
        // 3.-MOSTRAR EL FITNESS
        float x = Double.valueOf(RG.getFitness()).floatValue();
        return "Fitness : " + dec.format(x) + "/" + s;
    }

    private void pintar() {
        DrawMincroarray NewdrawMicroarray = new DrawMincroarray();
        NewdrawMicroarray.setMicroarray(ma);
        NewdrawMicroarray.setZoon(zoom);
        jScrollPaneMicroarray.setViewportView(NewdrawMicroarray);
        jScrollPaneMicroarray.repaint();
        jTabbedMostrar.setSelectedIndex(0);
    }
}
